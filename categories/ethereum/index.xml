<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ethereum on</title><link>/categories/ethereum/</link><description>Recent content in Ethereum on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Wed, 09 Dec 2020 12:29:07 +0000</lastBuildDate><atom:link href="/categories/ethereum/index.xml" rel="self" type="application/rss+xml"/><item><title>How Safe are My Private Keys?</title><link>/blog/how-safe-are-my-private-keys/</link><pubDate>Wed, 09 Dec 2020 12:29:07 +0000</pubDate><guid>/blog/how-safe-are-my-private-keys/</guid><description/></item><item><title>Ethereum’s Issuance: uncleReward</title><link>/blog/ethereums-issuance-unclereward/</link><pubDate>Sat, 15 Aug 2020 12:13:31 +0000</pubDate><guid>/blog/ethereums-issuance-unclereward/</guid><description>This the second in a series of two articles detailing Ethereum’s issuance. Read the first part, which discusses the blockReward calculation. Also, see the code base for the actual code. This article discusses the uncleReward.
Uncle Reward Previously, we looked at the ungrammatical second sentence in Section 11.3 of Ethereum’s Yellow Paper. In the first article, we discussed the first half of that sentence concerning blockReward. In this article we discuss the remaining half of that sentence (shown below) which details the uncleReward.</description></item><item><title>Ethereum’s Issuance: minerReward</title><link>/blog/ethereums-issuance-minerreward/</link><pubDate>Sat, 15 Aug 2020 11:44:23 +0000</pubDate><guid>/blog/ethereums-issuance-minerreward/</guid><description>Recently, there was a dustup on Crypto Twitter (started here, carries on here) about Ethereum’s money supply. The claim was made that Ethereum’s money supply was not easily available, nor was it widely agreed upon.
News flash: Both of these claims are right.
At one point, our project, TrueBlocks, was mentioned, so I thought I’d write an article (which has grown into two articles and a code base) exploring the issue.</description></item><item><title>Links About CLR, Radical Markets &amp; GitCoin</title><link>/blog/links-about-clr-radical-markets-gitcoin/</link><pubDate>Wed, 13 May 2020 02:33:50 +0000</pubDate><guid>/blog/links-about-clr-radical-markets-gitcoin/</guid><description>The Liberal Radicalism Mechanism for Producing Public Goods [Tabarrok] Experiments With Liberal Radicalism [Singh] Liberal Radicalism: Breaking down Buterin, Hitzig and Weyl Some Gentle Criticisms on Vitalik/Gitcoin CLR [van Ness] A Simple Way to Fund Public Goods [van Ness] Radical Market, ZK, Privacy and More [Buterin] Wikipedia: Quadratic Voting Eth Research A Proposal to Improve Pairwise Coordination Subsidies Pairwise Coordination Subsidies: A New Quadratic Funding Design [Buterin] A Strange Kind of Pairwise-Bounded Quadratic Funding Negative Votes in Quadratic Funding [Buterin] On Collusion [Buterin] Round 2 Gitcoin Grants: $50K Open Source Fund Round 3 Gitcoin’s Q3 Match: $100K+ to OSS projects CitCoin’s $4.</description></item><item><title>A Method to Diffuse the Ethereum Difficulty Bomb</title><link>/blog/a-method-to-diffuse-the-ethereum-difficulty-bomb/</link><pubDate>Tue, 26 Nov 2019 14:05:33 +0000</pubDate><guid>/blog/a-method-to-diffuse-the-ethereum-difficulty-bomb/</guid><description>There is no more angst-ridden profession than being a member of a bomb squad. You’ll know what I’m talking about if you’ve ever seen the movie The Hurt Locker. In a recent Gitter post in the All Core Devs channel, Alexey Akhunov says of the difficulty bomb that it, “…forces people to make rushed decisions and be reckless, without real emergency…” This is true currently, but we can do better.</description></item><item><title>It’s Not That Difficult</title><link>/blog/its-not-that-difficult/</link><pubDate>Sun, 24 Nov 2019 07:10:44 +0000</pubDate><guid>/blog/its-not-that-difficult/</guid><description>All about the Ethereum Difficulty Calculation
Special thanks to a first-rate Tuftian and data scientist, Ed Mazurek, for early versions of the R code used in this article.
Each time the Ethereum time bomb goes off, two related questions arise. The first question (and arguably the more important) is, “When will blocks get so slow, they will be intolerable”. The second question is, “How long should we delay the bomb this time?</description></item><item><title>A Short Take on Decentralization</title><link>/blog/a-short-take-on-decentralization/</link><pubDate>Mon, 13 Aug 2018 16:48:42 +0000</pubDate><guid>/blog/a-short-take-on-decentralization/</guid><description>This is a very short take on something I’ve been thinking about for quite a while. “Why do I give a shit about decentralization? Should I compromise?” Here’s why I come down emphatically on the side of “Yes, I give a shit, and no you should never compromise!”.
Blockchain-like technologies (that is, decentralizing, trustless technologies) bring to the world, for the first time in human history, a way to help us solve the prisoner’s dilemma.</description></item><item><title>Mantras for Decentralized Open Data</title><link>/blog/mantras-for-decentralized-open-data/</link><pubDate>Mon, 07 May 2018 19:21:58 +0000</pubDate><guid>/blog/mantras-for-decentralized-open-data/</guid><description>I had a wonderful experience at EdCon in Toronto this week. Mostly because of all the great new people I met and the many people I reacquainted myself with. The Ethereum community is freakin’ cool.
Here’s an example. In between speakers, the person sitting in front of me stood up, turned around, looked down at his seat and, using his pointing finger, counted the number of seats between him and the left isle.</description></item><item><title>The Trace Data Problem</title><link>/blog/the-trace-data-problem/</link><pubDate>Wed, 21 Feb 2018 00:31:37 +0000</pubDate><guid>/blog/the-trace-data-problem/</guid><description>I recently wrote a piece discussing how I defeated the Ethereum DDos attack using TrueBlocks. Doing this was important because it freed me from the pain of a slow RPC. Speed allows me to analyze the Ethereum data iteratively. I can find more interesting stuff.
The Ethereum dataset is big (and growing). I want to be able to scan through the entire thing. I want to be able to do this on a laptop.</description></item><item><title>Reading Byzantium’s Tea Leaves</title><link>/blog/reading-byzantiums-tea-leaves/</link><pubDate>Mon, 02 Oct 2017 01:43:50 +0000</pubDate><guid>/blog/reading-byzantiums-tea-leaves/</guid><description>I used to watch a television show called “Wall Street Week with Louis Rukeyser.” The host would frequently laugh at the way Alan Greenspan, the Chairman of the Federal Reserve, would testify in front of Congress. Rukeyser found it comical that we all had to “read the tea leaves” after Greenspan spoke.
“I should warn you, if I turn out to be clear, you’ve probably misunderstood me.” ~Alan Greenspan
Why did Mr.</description></item></channel></rss>